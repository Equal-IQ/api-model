/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/deleteContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeleteContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContractReadURL": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContractReadURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getProfile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listContracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListContracts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Ping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shareContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ShareContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateProfile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploadURL": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUploadURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        AccountType: "artist" | "manager" | "lawyer" | "producer";
        AuthenticationErrorResponseContent: {
            message: string;
        };
        /** @enum {string} */
        ContractStatus: "processing" | "complete" | "error" | "awaiting_upload";
        ContractSummaryItem: {
            contractId: string;
            name: string;
            /** Format: double */
            uploadedOn: number;
            type: components["schemas"]["ContractType"];
            status: components["schemas"]["ContractStatus"];
            isOwner: boolean;
            ownerId: string;
            sharedWith?: string[];
            sharedUsers?: string[];
            sharedEmails?: string[];
        };
        /** @enum {string} */
        ContractType: "recording" | "publishing" | "management" | "producer" | "tbd";
        DeleteContractRequestContent: {
            contractId: string;
        };
        DeleteContractResponseContent: {
            success: boolean;
        };
        GetContractReadURLRequestContent: {
            contractId: string;
        };
        GetContractReadURLResponseContent: {
            url: string;
        };
        GetContractRequestContent: {
            contractId: string;
        };
        GetContractResponseContent: {
            contractId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            terms: unknown;
            iq_qa: components["schemas"]["QASections"];
            isOwner: boolean;
            ownerId: string;
            sharedWith: string[];
        };
        GetProfileRequestContent: {
            userId?: string;
        };
        GetProfileResponseContent: {
            userId: string;
            profile: components["schemas"]["UserProfile"];
        };
        GetUploadURLRequestContent: {
            name: string;
        };
        GetUploadURLResponseContent: {
            url_info: components["schemas"]["PresignedPostData"];
        };
        InternalServerErrorResponseContent: {
            message: string;
        };
        ListContractsResponseContent: {
            owned: components["schemas"]["ContractSummaryItem"][];
            shared: components["schemas"]["ContractSummaryItem"][];
        };
        PingResponseContent: {
            message: string;
        };
        PresignedPostData: {
            url: string;
            fields: unknown;
        };
        ProcessingIncompleteErrorResponseContent: {
            message: string;
        };
        QASection: {
            title: string;
            questions: components["schemas"]["Question"][];
        };
        QASections: {
            sections: components["schemas"]["QASection"][];
        };
        Question: {
            question: string;
            answer: string;
        };
        ResourceNotFoundErrorResponseContent: {
            message: string;
        };
        ShareContractRequestContent: {
            contractId: string;
            emailsToAdd?: string[];
            emailsToRemove?: string[];
        };
        ShareContractResponseContent: {
            success: boolean;
            contractId: string;
            sharedWith: components["schemas"]["SharedUserDetails"][];
            added?: string[];
            removed?: string[];
            invalidRemoves?: string[];
        };
        SharedUserDetails: {
            userId: string;
            email: string;
            /** Format: double */
            sharedTime: number;
        };
        UpdateContractRequestContent: {
            contractId: string;
            name: string;
        };
        UpdateContractResponseContent: {
            success: boolean;
        };
        UpdateProfileRequestContent: {
            firstName?: string;
            lastName?: string;
            displayName?: string;
            accountType?: components["schemas"]["AccountType"];
            bio?: string;
            isOver18?: boolean;
        };
        UpdateProfileResponseContent: {
            success: boolean;
            message: string;
            userId: string;
            updatedFields?: string[];
        };
        UserProfile: {
            userId?: string;
            firstName?: string;
            lastName?: string;
            displayName?: string;
            email?: string;
            accountType?: components["schemas"]["AccountType"];
            bio?: string;
        };
        ValidationErrorResponseContent: {
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    DeleteContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteContractRequestContent"];
            };
        };
        responses: {
            /** @description DeleteContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteContractResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractRequestContent"];
            };
        };
        responses: {
            /** @description GetContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractResponseContent"];
                };
            };
            /** @description ProcessingIncompleteError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingIncompleteErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContractReadURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractReadURLRequestContent"];
            };
        };
        responses: {
            /** @description GetContractReadURL 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractReadURLResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetProfileRequestContent"];
            };
        };
        responses: {
            /** @description GetProfile 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProfileResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ListContracts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListContracts 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListContractsResponseContent"];
                };
            };
            /** @description AuthenticationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    Ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ping 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PingResponseContent"];
                };
            };
        };
    };
    ShareContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareContractRequestContent"];
            };
        };
        responses: {
            /** @description ShareContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareContractResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContractRequestContent"];
            };
        };
        responses: {
            /** @description UpdateContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateContractResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequestContent"];
            };
        };
        responses: {
            /** @description UpdateProfile 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProfileResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetUploadURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetUploadURLRequestContent"];
            };
        };
        responses: {
            /** @description GetUploadURL 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUploadURLResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
}
