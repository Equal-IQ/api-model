/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/deleteContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeleteContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContractReadURL": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContractReadURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getProfile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getProfilePicture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProfilePicture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getSpecialContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSpecialContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getTTSURLs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetTTSURLs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listContracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListContracts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listSpecialContracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListSpecialContracts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notARealEndpoint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ExposeTypes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Ping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shareContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ShareContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateProfile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploadProfilePicture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UploadProfilePicture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploadURL": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUploadURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        AccountType: AccountType;
        AuthenticationErrorResponseContent: {
            message: string;
        };
        ContractAnalysisRecord: {
            contractId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            status: components["schemas"]["ContractStatus"];
            uploadedOn: string;
            ownerId: string;
            eqData: components["schemas"]["EqModeData"];
            iqData: components["schemas"]["IqModeData"];
            contractExtraction: components["schemas"]["ContractExtractionResult"];
            sharedUsers?: components["schemas"]["SharedUserDetails"][];
            hasTTS?: boolean;
            isSpecial?: boolean;
        };
        ContractExtractionResult: {
            extractedType?: components["schemas"]["ContractType"];
            parties?: string[];
            terms?: components["schemas"]["ExtractionTermMap"];
            variables?: components["schemas"]["ContractVariableMap"];
            contractText?: components["schemas"]["ContractMarkupResult"];
        };
        ContractMarkupResult: {
            markedUpContract: components["schemas"]["TaggedText"];
            statistics: components["schemas"]["MarkupStatistics"];
        };
        ContractMetadata: {
            contractId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            status: components["schemas"]["ContractStatus"];
            uploadedOn: string;
            ownerId: string;
            sharedUsers?: components["schemas"]["SharedUserDetails"][];
            isOwner?: boolean;
            hasTTS?: boolean;
            isSpecial?: boolean;
        };
        /** @enum {string} */
        ContractStatus: ContractStatus;
        ContractSummaryItem: {
            contractId: string;
            name: string;
            /** Format: double */
            uploadedOn: number;
            type: components["schemas"]["ContractType"];
            status: components["schemas"]["ContractStatus"];
            isOwner: boolean;
            ownerId: string;
            sharedWith?: string[];
            sharedUsers?: string[];
            sharedEmails?: string[];
        };
        /** @enum {string} */
        ContractType: ContractType;
        ContractVariable: {
            name: string;
            type: components["schemas"]["ContractVariableType"];
            id: string;
            value?: string;
            level?: number;
            /** Format: float */
            confidence?: number;
            firstOccurrence?: number;
            context?: string;
            variations?: string[];
            referencedSection?: string;
            definitionCitation?: string;
        };
        ContractVariableMap: {
            [key: string]: components["schemas"]["ContractVariable"];
        };
        /** @enum {string} */
        ContractVariableType: ContractVariableType;
        DeleteContractRequestContent: {
            contractId: string;
        };
        DeleteContractResponseContent: {
            success: boolean;
        };
        /** @enum {string} */
        DurationType: DurationType;
        EmptyStructure: Record<string, never>;
        /** @enum {string} */
        EqCardKey: EqCardKey;
        /** @enum {string} */
        EqCardType: EqCardType;
        EqCardUniqueData: {
            MONEY_RECEIVED: components["schemas"]["EqMoneyCard"];
        } | {
            OWNERSHIP: components["schemas"]["EqOwnershipCard"];
        } | {
            RESPONSIBILITIES: components["schemas"]["EqResponsibilitesCard"];
        } | {
            DURATION: components["schemas"]["EqDurationCard"];
        } | {
            LEGAL: components["schemas"]["EqLegalCard"];
        } | {
            EMPTY: components["schemas"]["EmptyStructure"];
        };
        EqDurationCard: {
            durationType: components["schemas"]["DurationType"];
            durationText: string;
            durationDetails?: components["schemas"]["SimpleTermDescription"][];
        };
        EqLegalCard: {
            risks: string;
            costs: string;
            legal: string;
        };
        EqModeCard: {
            id: components["schemas"]["EqCardKey"];
            title: string;
            type: components["schemas"]["EqCardType"];
            cardUniqueData: components["schemas"]["EqCardUniqueData"];
            /** @description Deprecated, use subTitle Instead */
            eqTitle?: string;
            subTitle?: string;
            /** @description Deprecated, this should be in the in a custom subtype */
            totalAdvance?: string;
            /** @description Deprecated, this should be in the in a custom subtype */
            items?: components["schemas"]["EqModeItem"][];
            /** @description Deprecated, use the ttsSrcUrl */
            audioSrc?: string;
            ttsSrcUrl?: string;
        };
        EqModeCardMap: {
            [key: string]: components["schemas"]["EqModeCard"];
        };
        EqModeData: {
            cards?: components["schemas"]["EqModeCardMap"];
        };
        /** @description Deprecated */
        EqModeItem: {
            title?: string;
            value?: string;
        };
        EqMoneyCard: {
            majorNumber: string;
            paidAfterList: string[];
        };
        EqOwnershipCard: {
            ownershipTerms: components["schemas"]["SimpleTermDescription"][];
        };
        EqResponsibilitesCard: {
            responsibilites: components["schemas"]["SimpleTermDescription"][];
        };
        ExposeTypesResponseContent: {
            contractAnalysisRecord?: components["schemas"]["ContractAnalysisRecord"];
        };
        ExtractionTerm: {
            name: string;
            definition: string;
            unitType: string;
            explanation: string;
            notes: string;
            citation: string;
            fixedValues?: components["schemas"]["FixedValueTermInference"];
            fixedValueGuideline?: string;
            originalValue?: string;
        };
        ExtractionTermMap: {
            [key: string]: components["schemas"]["ExtractionTerm"];
        };
        FixedTermValue: {
            unit: string;
            value: string;
            name?: string;
            /** Format: float */
            numericValue?: number;
            condition?: string;
        };
        FixedValueTermInference: {
            primary: components["schemas"]["FixedTermValue"];
            subterms?: components["schemas"]["FixedTermValue"][];
        };
        GetContractReadURLRequestContent: {
            contractId: string;
        };
        GetContractReadURLResponseContent: {
            url: string;
        };
        GetContractRequestContent: {
            contractId: string;
        };
        GetContractResponseContent: {
            contractId: string;
            ownerId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            eqData?: components["schemas"]["EqModeData"];
            iqData?: components["schemas"]["IqModeData"];
            contractExtraction?: components["schemas"]["ContractExtractionResult"];
            sharedWith?: string[];
            isOwner?: boolean;
        };
        GetProfilePictureRequestContent: {
            userId?: string;
        };
        GetProfilePictureResponseContent: {
            profilePictureURL: string;
        };
        GetProfileRequestContent: {
            userId?: string;
        };
        GetProfileResponseContent: {
            userId: string;
            profile: components["schemas"]["UserProfile"];
        };
        GetSpecialContractRequestContent: {
            contractId: string;
        };
        GetSpecialContractResponseContent: {
            contractId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            eqmode: unknown;
            sections: unknown;
            isOwner: boolean;
            ownerId: string;
            sharedWith: string[];
        };
        GetTTSURLsRequestContent: {
            contractId: string;
        };
        GetTTSURLsResponseContent: {
            contractId: string;
            ttsSrcUrl: components["schemas"]["TTSPresignedUrlMap"];
        };
        GetUploadURLRequestContent: {
            name: string;
        };
        GetUploadURLResponseContent: {
            url_info: components["schemas"]["PresignedPostData"];
        };
        InternalServerErrorResponseContent: {
            message: string;
        };
        IqModeData: {
            iqModeData?: components["schemas"]["IqModePerspectiveMap"];
        };
        IqModePerspective: {
            sections: components["schemas"]["IqModeSectionMap"];
        };
        IqModePerspectiveMap: {
            [key: string]: components["schemas"]["IqModePerspective"];
        };
        IqModeQuestion: {
            question: components["schemas"]["TaggedText"];
            answer: components["schemas"]["TaggedText"];
            ttsSrcUrl?: string;
        };
        IqModeSection: {
            id: components["schemas"]["IqModeSectionKey"];
            sectionTitle: string;
            questions: components["schemas"]["IqModeQuestion"][];
        };
        /** @enum {string} */
        IqModeSectionKey: IqModeSectionKey;
        IqModeSectionMap: {
            [key: string]: components["schemas"]["IqModeSection"];
        };
        ListContractsResponseContent: {
            /** @description Deprecation path (v0.5) */
            owned?: components["schemas"]["ContractSummaryItem"][];
            /** @description Deprecation path (v0.5) */
            shared?: components["schemas"]["ContractSummaryItem"][];
            /** @description v1 */
            contracts?: components["schemas"]["ContractMetadata"][];
        };
        ListSpecialContractsResponseContent: {
            owned: components["schemas"]["ContractSummaryItem"][];
            shared: components["schemas"]["ContractSummaryItem"][];
        };
        MarkupStatistics: {
            originalLength: number;
            markedUpLength: number;
            totalVariables: number;
            /** Format: float */
            processingTimeSeconds: number;
            chunksProcessed: number;
        };
        PingResponseContent: {
            message: string;
        };
        PresignedPostData: {
            url: string;
            fields: unknown;
        };
        ProcessingIncompleteErrorResponseContent: {
            message: string;
        };
        ResourceNotFoundErrorResponseContent: {
            message: string;
        };
        ShareContractRequestContent: {
            contractId: string;
            emailsToAdd?: string[];
            emailsToRemove?: string[];
        };
        ShareContractResponseContent: {
            success: boolean;
            contractId: string;
            sharedWith: components["schemas"]["SharedUserDetails"][];
            added?: string[];
            removed?: string[];
            invalidRemoves?: string[];
        };
        SharedUserDetails: {
            sharedWithUserId: string;
            sharedByUserId: string;
            sharedWithUserEmail: string;
            /** Format: double */
            sharedTime: number;
        };
        SimpleTermDescription: {
            title: string;
            description: string;
        };
        TTSPresignedUrlMap: {
            [key: string]: string;
        };
        TaggedText: {
            text: string;
        };
        UpdateContractRequestContent: {
            contractId: string;
            name: string;
        };
        UpdateContractResponseContent: {
            success: boolean;
        };
        UpdateProfileRequestContent: {
            firstName?: string;
            lastName?: string;
            displayName?: string;
            accountType?: components["schemas"]["AccountType"];
            bio?: string;
            isOver18?: boolean;
        };
        UpdateProfileResponseContent: {
            success: boolean;
            message: string;
            userId: string;
            updatedFields?: string[];
        };
        UploadProfilePictureRequestContent: {
            image?: string;
            userId?: string;
        };
        UploadProfilePictureResponseContent: {
            message?: string;
            picture_id?: string;
        };
        UserProfile: {
            userId?: string;
            firstName?: string;
            lastName?: string;
            displayName?: string;
            email?: string;
            accountType?: components["schemas"]["AccountType"];
            bio?: string;
        };
        ValidationErrorResponseContent: {
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    DeleteContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteContractRequestContent"];
            };
        };
        responses: {
            /** @description DeleteContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteContractResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractRequestContent"];
            };
        };
        responses: {
            /** @description GetContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractResponseContent"];
                };
            };
            /** @description ProcessingIncompleteError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingIncompleteErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContractReadURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractReadURLRequestContent"];
            };
        };
        responses: {
            /** @description GetContractReadURL 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractReadURLResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetProfileRequestContent"];
            };
        };
        responses: {
            /** @description GetProfile 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProfileResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetProfilePicture: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetProfilePictureRequestContent"];
            };
        };
        responses: {
            /** @description GetProfilePicture 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProfilePictureResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetSpecialContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetSpecialContractRequestContent"];
            };
        };
        responses: {
            /** @description GetSpecialContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSpecialContractResponseContent"];
                };
            };
            /** @description ProcessingIncompleteError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingIncompleteErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetTTSURLs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetTTSURLsRequestContent"];
            };
        };
        responses: {
            /** @description GetTTSURLs 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTTSURLsResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ListContracts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListContracts 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListContractsResponseContent"];
                };
            };
            /** @description AuthenticationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ListSpecialContracts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSpecialContracts 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSpecialContractsResponseContent"];
                };
            };
            /** @description AuthenticationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ExposeTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ExposeTypes 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExposeTypesResponseContent"];
                };
            };
        };
    };
    Ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ping 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PingResponseContent"];
                };
            };
        };
    };
    ShareContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareContractRequestContent"];
            };
        };
        responses: {
            /** @description ShareContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareContractResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContractRequestContent"];
            };
        };
        responses: {
            /** @description UpdateContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateContractResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequestContent"];
            };
        };
        responses: {
            /** @description UpdateProfile 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProfileResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UploadProfilePicture: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadProfilePictureRequestContent"];
            };
        };
        responses: {
            /** @description UploadProfilePicture 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadProfilePictureResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetUploadURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetUploadURLRequestContent"];
            };
        };
        responses: {
            /** @description GetUploadURL 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUploadURLResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
}
export enum AccountType {
    artist = "artist",
    manager = "manager",
    lawyer = "lawyer",
    producer = "producer",
    publisher = "publisher",
    executive = "executive"
}
export enum ContractStatus {
    processing = "processing",
    complete = "complete",
    error = "error",
    awaiting_upload = "awaiting_upload"
}
export enum ContractType {
    recording = "recording",
    publishing = "publishing",
    management = "management",
    producer = "producer",
    services = "services",
    tbd = "tbd"
}
export enum ContractVariableType {
    eq_term = "eq_term",
    discovered_term = "discovered_term",
    external_term = "external_term",
    internal_citation = "internal_citation"
}
export enum DurationType {
    fixed = "fixed",
    indefinite = "indefinite",
    renewable = "renewable",
    other = "other"
}
export enum EqCardKey {
    moneyYouReceive = "moneyYouReceive",
    whatYouOwn = "whatYouOwn",
    whatYoureResponsibleFor = "whatYoureResponsibleFor",
    howLongThisDealLasts = "howLongThisDealLasts",
    risksCostsLegalStuff = "risksCostsLegalStuff"
}
export enum EqCardType {
    A = "A",
    B = "B"
}
export enum IqModeSectionKey {
    earnings = "earnings",
    qualityOfRights = "qualityOfRights",
    usageObligations = "usageObligations",
    agreementLength = "agreementLength",
    liabilitySafeguards = "liabilitySafeguards"
}
