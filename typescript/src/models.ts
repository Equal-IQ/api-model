/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/deleteContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeleteContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deleteContractSignature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["DeleteContractSignature"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContractReadURL": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContractReadURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getContractSignatures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetContractSignatures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getProfile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getProfilePicture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetProfilePicture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/getSpecialContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetSpecialContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listContracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListContracts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listSpecialContracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ListSpecialContracts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notARealEndpoint": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ExposeTypes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Ping"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shareContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ShareContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SignContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateContract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateProfile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/updateSignatureStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UpdateSignatureStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploadProfilePicture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UploadProfilePicture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploadURL": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["GetUploadURL"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        AccountType: AccountType;
        AuthenticationErrorResponseContent: {
            message: string;
        };
        CompleteTerm: {
            name: string;
            definition: string;
            unitType: string;
            explanation: string;
            notes: string;
            citation: string;
            fixedValues: components["schemas"]["FixedValueTermInference"];
            fixedValueGuideline?: string;
            originalValue?: string;
        };
        ContractMarkupResult: {
            markedUpContract: string;
            statistics: components["schemas"]["MarkupStatistics"];
        };
        ContractSignature: {
            userId?: string;
            status?: components["schemas"]["SignatureStatus"];
            /** Format: double */
            timestamp?: number;
        };
        /** @enum {string} */
        ContractStatus: ContractStatus;
        ContractSummary: {
            type: string;
            parties: string[];
        };
        ContractSummaryItem: {
            contractId: string;
            name: string;
            /** Format: double */
            uploadedOn: number;
            type: components["schemas"]["ContractType"];
            status: components["schemas"]["ContractStatus"];
            isOwner: boolean;
            ownerId: string;
            sharedWith?: string[];
            sharedUsers?: string[];
            sharedEmails?: string[];
        };
        /** @enum {string} */
        ContractType: ContractType;
        ContractVariable: {
            name: string;
            type: components["schemas"]["ContractVariableType"];
            id: string;
            value?: string;
            level?: number;
            /** Format: float */
            confidence?: number;
            firstOccurrence?: number;
            context?: string;
            variations?: string[];
            referencedSection?: string;
            definitionCitation?: string;
        };
        /** @enum {string} */
        ContractVariableType: ContractVariableType;
        DeleteContractRequestContent: {
            contractId: string;
        };
        DeleteContractResponseContent: {
            success: boolean;
        };
        DeleteContractSignatureRequestContent: {
            contractId: string;
        };
        DeleteContractSignatureResponseContent: {
            result?: components["schemas"]["SignContractResult"];
            message?: string;
        };
        EQResult: {
            terms: components["schemas"]["CompleteTerm"][];
        };
        ExposeTypesResponseContent: {
            QASectionsList?: components["schemas"]["QASection"][];
            ContractVariable?: components["schemas"]["ContractVariable"];
            ContractVariableType?: components["schemas"]["ContractVariableType"];
            SummaryResult?: components["schemas"]["SummaryResult"];
            EQResult?: components["schemas"]["EQResult"];
            IQResult?: components["schemas"]["IQResult"];
            VariableExtractionResult?: components["schemas"]["VariableExtractionResult"];
            ContractMarkupResult?: components["schemas"]["ContractMarkupResult"];
            IQAnswersMarkupResult?: components["schemas"]["IQAnswersMarkupResult"];
        };
        FixedTermValue: {
            unit: string;
            value: string;
            name?: string;
            /** Format: float */
            numericValue?: number;
            condition?: string;
        };
        FixedValueTermInference: {
            primary: components["schemas"]["FixedTermValue"];
            subterms?: components["schemas"]["FixedTermValue"][];
        };
        GetContractReadURLRequestContent: {
            contractId: string;
        };
        GetContractReadURLResponseContent: {
            url: string;
        };
        GetContractRequestContent: {
            contractId: string;
        };
        GetContractResponseContent: {
            contractId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            terms: components["schemas"]["Term"][];
            qa_sections: string;
            isOwner: boolean;
            ownerId: string;
            sharedWith: string[];
        };
        GetContractSignaturesRequestContent: {
            contractId: string;
        };
        GetContractSignaturesResponseContent: {
            contractId?: string;
            signatures?: components["schemas"]["ContractSignature"][];
        };
        GetProfilePictureRequestContent: {
            userId?: string;
        };
        GetProfilePictureResponseContent: {
            profilePictureURL: string;
        };
        GetProfileRequestContent: {
            userId?: string;
        };
        GetProfileResponseContent: {
            userId: string;
            profile: components["schemas"]["UserProfile"];
        };
        GetSpecialContractRequestContent: {
            contractId: string;
        };
        GetSpecialContractResponseContent: {
            contractId: string;
            name: string;
            type: components["schemas"]["ContractType"];
            eqmode: unknown;
            sections: unknown;
            isOwner: boolean;
            ownerId: string;
            sharedWith: string[];
        };
        GetUploadURLRequestContent: {
            name: string;
        };
        GetUploadURLResponseContent: {
            url_info: components["schemas"]["PresignedPostData"];
        };
        IQAnswersMarkupResult: {
            markedUpPerspectiveQA: components["schemas"]["PerspectiveQASet"];
        };
        IQResult: {
            qa: components["schemas"]["QASection"][];
            perspectiveQA: components["schemas"]["PerspectiveQASet"];
        };
        InternalServerErrorResponseContent: {
            message: string;
        };
        ListContractsResponseContent: {
            owned: components["schemas"]["ContractSummaryItem"][];
            shared: components["schemas"]["ContractSummaryItem"][];
        };
        ListSpecialContractsResponseContent: {
            owned: components["schemas"]["ContractSummaryItem"][];
            shared: components["schemas"]["ContractSummaryItem"][];
        };
        MarkupStatistics: {
            originalLength: number;
            markedUpLength: number;
            totalVariables: number;
            /** Format: float */
            processingTimeSeconds: number;
            chunksProcessed: number;
        };
        PerspectiveQASet: {
            [key: string]: components["schemas"]["QASection"][];
        };
        PingResponseContent: {
            message: string;
        };
        PresignedPostData: {
            url: string;
            fields: unknown;
        };
        ProcessingIncompleteErrorResponseContent: {
            message: string;
        };
        QA: {
            question: string;
            answer: string;
        };
        QASection: {
            section: string;
            qa: components["schemas"]["QA"][];
        };
        ResourceNotFoundErrorResponseContent: {
            message: string;
        };
        ShareContractRequestContent: {
            contractId: string;
            emailsToAdd?: string[];
            emailsToRemove?: string[];
        };
        ShareContractResponseContent: {
            success: boolean;
            contractId: string;
            sharedWith: components["schemas"]["SharedUserDetails"][];
            added?: string[];
            removed?: string[];
            invalidRemoves?: string[];
        };
        SharedUserDetails: {
            userId: string;
            email: string;
            /** Format: double */
            sharedTime: number;
        };
        SignContractRequestContent: {
            contractId: string;
            status: components["schemas"]["SignatureStatus"];
        };
        SignContractResponseContent: {
            result: components["schemas"]["SignContractResult"];
            message?: string;
        };
        /** @enum {string} */
        SignContractResult: SignContractResult;
        /** @enum {string} */
        SignatureStatus: SignatureStatus;
        SummaryResult: {
            summary: components["schemas"]["ContractSummary"];
        };
        Term: {
            name: string;
            definition: string;
            unitType: string;
            citation?: string;
            fixedValues?: components["schemas"]["FixedValueTermInference"];
        };
        UpdateContractRequestContent: {
            contractId: string;
            name: string;
        };
        UpdateContractResponseContent: {
            success: boolean;
        };
        UpdateProfileRequestContent: {
            firstName?: string;
            lastName?: string;
            displayName?: string;
            accountType?: components["schemas"]["AccountType"];
            bio?: string;
            isOver18?: boolean;
        };
        UpdateProfileResponseContent: {
            success: boolean;
            message: string;
            userId: string;
            updatedFields?: string[];
        };
        UpdateSignatureStatusRequestContent: {
            contractId: string;
            status: components["schemas"]["SignatureStatus"];
        };
        UpdateSignatureStatusResponseContent: {
            result: components["schemas"]["SignContractResult"];
            message: string;
        };
        UploadProfilePictureRequestContent: {
            image?: string;
            userId?: string;
        };
        UploadProfilePictureResponseContent: {
            message?: string;
            picture_id?: string;
        };
        UserProfile: {
            userId?: string;
            firstName?: string;
            lastName?: string;
            displayName?: string;
            email?: string;
            accountType?: components["schemas"]["AccountType"];
            bio?: string;
        };
        ValidationErrorResponseContent: {
            message: string;
        };
        VariableExtractionResult: {
            variables: components["schemas"]["ContractVariable"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    DeleteContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteContractRequestContent"];
            };
        };
        responses: {
            /** @description DeleteContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteContractResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    DeleteContractSignature: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteContractSignatureRequestContent"];
            };
        };
        responses: {
            /** @description DeleteContractSignature 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteContractSignatureResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractRequestContent"];
            };
        };
        responses: {
            /** @description GetContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractResponseContent"];
                };
            };
            /** @description ProcessingIncompleteError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingIncompleteErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContractReadURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractReadURLRequestContent"];
            };
        };
        responses: {
            /** @description GetContractReadURL 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractReadURLResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetContractSignatures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetContractSignaturesRequestContent"];
            };
        };
        responses: {
            /** @description GetContractSignatures 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractSignaturesResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetProfileRequestContent"];
            };
        };
        responses: {
            /** @description GetProfile 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProfileResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetProfilePicture: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetProfilePictureRequestContent"];
            };
        };
        responses: {
            /** @description GetProfilePicture 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProfilePictureResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetSpecialContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetSpecialContractRequestContent"];
            };
        };
        responses: {
            /** @description GetSpecialContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSpecialContractResponseContent"];
                };
            };
            /** @description ProcessingIncompleteError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProcessingIncompleteErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ListContracts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListContracts 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListContractsResponseContent"];
                };
            };
            /** @description AuthenticationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ListSpecialContracts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ListSpecialContracts 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSpecialContractsResponseContent"];
                };
            };
            /** @description AuthenticationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthenticationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    ExposeTypes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ExposeTypes 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExposeTypesResponseContent"];
                };
            };
        };
    };
    Ping: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ping 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PingResponseContent"];
                };
            };
        };
    };
    ShareContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareContractRequestContent"];
            };
        };
        responses: {
            /** @description ShareContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareContractResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    SignContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignContractRequestContent"];
            };
        };
        responses: {
            /** @description SignContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignContractResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateContractRequestContent"];
            };
        };
        responses: {
            /** @description UpdateContract 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateContractResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequestContent"];
            };
        };
        responses: {
            /** @description UpdateProfile 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProfileResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UpdateSignatureStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSignatureStatusRequestContent"];
            };
        };
        responses: {
            /** @description UpdateSignatureStatus 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateSignatureStatusResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    UploadProfilePicture: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UploadProfilePictureRequestContent"];
            };
        };
        responses: {
            /** @description UploadProfilePicture 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadProfilePictureResponseContent"];
                };
            };
            /** @description ResourceNotFoundError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceNotFoundErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
    GetUploadURL: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetUploadURLRequestContent"];
            };
        };
        responses: {
            /** @description GetUploadURL 200 response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUploadURLResponseContent"];
                };
            };
            /** @description ValidationError 400 response */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponseContent"];
                };
            };
            /** @description InternalServerError 500 response */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseContent"];
                };
            };
        };
    };
}
export enum AccountType {
    artist = "artist",
    manager = "manager",
    lawyer = "lawyer",
    producer = "producer",
    publisher = "publisher",
    executive = "executive"
}
export enum ContractStatus {
    processing = "processing",
    complete = "complete",
    error = "error",
    awaiting_upload = "awaiting_upload"
}
export enum ContractType {
    recording = "recording",
    publishing = "publishing",
    management = "management",
    producer = "producer",
    services = "services",
    tbd = "tbd"
}
export enum ContractVariableType {
    eq_term = "eq_term",
    discovered_term = "discovered_term",
    external_term = "external_term",
    internal_citation = "internal_citation"
}
export enum SignContractResult {
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE"
}
export enum SignatureStatus {
    signed = "signed",
    declined = "declined",
    pending = "pending"
}
